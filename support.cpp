/*    
    Copyright (c) 2021 EIIT S.A.

    @file          support.cpp
    @project       ATE.2000210
    @version       2.0.0
    @date          July 2021
    @author        Rachid Souky
*/

#include "support.h"

unsigned char reverse_byte(unsigned char x)
{
    static const unsigned char table[] = {
        0x00, 0x80, 0x40, 0xc0, 0x20, 0xa0, 0x60, 0xe0,
        0x10, 0x90, 0x50, 0xd0, 0x30, 0xb0, 0x70, 0xf0,
        0x08, 0x88, 0x48, 0xc8, 0x28, 0xa8, 0x68, 0xe8,
        0x18, 0x98, 0x58, 0xd8, 0x38, 0xb8, 0x78, 0xf8,
        0x04, 0x84, 0x44, 0xc4, 0x24, 0xa4, 0x64, 0xe4,
        0x14, 0x94, 0x54, 0xd4, 0x34, 0xb4, 0x74, 0xf4,
        0x0c, 0x8c, 0x4c, 0xcc, 0x2c, 0xac, 0x6c, 0xec,
        0x1c, 0x9c, 0x5c, 0xdc, 0x3c, 0xbc, 0x7c, 0xfc,
        0x02, 0x82, 0x42, 0xc2, 0x22, 0xa2, 0x62, 0xe2,
        0x12, 0x92, 0x52, 0xd2, 0x32, 0xb2, 0x72, 0xf2,
        0x0a, 0x8a, 0x4a, 0xca, 0x2a, 0xaa, 0x6a, 0xea,
        0x1a, 0x9a, 0x5a, 0xda, 0x3a, 0xba, 0x7a, 0xfa,
        0x06, 0x86, 0x46, 0xc6, 0x26, 0xa6, 0x66, 0xe6,
        0x16, 0x96, 0x56, 0xd6, 0x36, 0xb6, 0x76, 0xf6,
        0x0e, 0x8e, 0x4e, 0xce, 0x2e, 0xae, 0x6e, 0xee,
        0x1e, 0x9e, 0x5e, 0xde, 0x3e, 0xbe, 0x7e, 0xfe,
        0x01, 0x81, 0x41, 0xc1, 0x21, 0xa1, 0x61, 0xe1,
        0x11, 0x91, 0x51, 0xd1, 0x31, 0xb1, 0x71, 0xf1,
        0x09, 0x89, 0x49, 0xc9, 0x29, 0xa9, 0x69, 0xe9,
        0x19, 0x99, 0x59, 0xd9, 0x39, 0xb9, 0x79, 0xf9,
        0x05, 0x85, 0x45, 0xc5, 0x25, 0xa5, 0x65, 0xe5,
        0x15, 0x95, 0x55, 0xd5, 0x35, 0xb5, 0x75, 0xf5,
        0x0d, 0x8d, 0x4d, 0xcd, 0x2d, 0xad, 0x6d, 0xed,
        0x1d, 0x9d, 0x5d, 0xdd, 0x3d, 0xbd, 0x7d, 0xfd,
        0x03, 0x83, 0x43, 0xc3, 0x23, 0xa3, 0x63, 0xe3,
        0x13, 0x93, 0x53, 0xd3, 0x33, 0xb3, 0x73, 0xf3,
        0x0b, 0x8b, 0x4b, 0xcb, 0x2b, 0xab, 0x6b, 0xeb,
        0x1b, 0x9b, 0x5b, 0xdb, 0x3b, 0xbb, 0x7b, 0xfb,
        0x07, 0x87, 0x47, 0xc7, 0x27, 0xa7, 0x67, 0xe7,
        0x17, 0x97, 0x57, 0xd7, 0x37, 0xb7, 0x77, 0xf7,
        0x0f, 0x8f, 0x4f, 0xcf, 0x2f, 0xaf, 0x6f, 0xef,
        0x1f, 0x9f, 0x5f, 0xdf, 0x3f, 0xbf, 0x7f, 0xff,
    };
    return table[x];
}

uint16_t calc_crc16_ccitt_false(char *array, unsigned int arraySize) {
    
    char var2 = 0x00;
    uint16_t init = 0xFFFF, poly = 0x1021, crc = 0x0000;
    bool c1 = 0, c2 = 0;
    
    crc = init;
    
    for(int i=0; i<arraySize; i++) {
        var2 = *array;
        for(int j=0; j<8; j++)  {
            c1 = ((crc & 0x8000) == 0x8000) ;
            crc = crc << 1;
            c2 = ((var2 & 0x80) == 0x80);
            var2 = var2 << 1;
            if(c1 ^ c2) crc = crc ^ poly;
        }
        array++;
    }    
    return crc;
}

uint16_t set_mlbID_parity(uint16_t mlbID) {
    
    bool P0 = 0, P1 = 0;
    
    mlbID = (mlbID & 0xFFFC);
    
    P0 = !(count_set_bits((unsigned int)((mlbID & 0x00FC)>>2)) % 2);
    P1 = !(count_set_bits((unsigned int)((mlbID & 0xFFFC)>>2)) % 2);
    
    if(P0) mlbID = (mlbID | 0x0001);
    if(P1) mlbID = (mlbID | 0x0002);
    
    return mlbID;
}

unsigned int count_set_bits(unsigned int n) {
    
    unsigned int count = 0;
    while (n) {
        count += n & 1;
        n >>= 1;
    }
    return count;
}

void compose_melibu_full_frame(char *array, unsigned int arraySize, unsigned int slaveAdd) {
    
    uint16_t mlbID = 0x0000, crc = 0x0000;
    
    mlbID = (uint16_t)*array;
    mlbID = (uint16_t)((mlbID<<8) + *(array+1));
    mlbID = (mlbID & 0x03FF) | ((uint16_t)((slaveAdd)<<10)); 
    mlbID = set_mlbID_parity(mlbID);
    
    *array = (char)((mlbID & 0xFF00)>>8);
    *(array+1) = (char)(mlbID & 0x00FF);
    
    crc = calc_crc16_ccitt_false(array, (arraySize-2));
    
    *(array+(arraySize-2)) = (char)((crc & 0xFF00)>>8);
    *(array+(arraySize-1)) = (char)(crc & 0x00FF);     
}

void compose_melibu_header_frame(char *array, unsigned int arraySize, unsigned int slaveAdd) {
    
    uint16_t mlbID = 0x0000;
    
    mlbID = (uint16_t)*array;
    mlbID = (uint16_t)((mlbID<<8) + *(array+1));
    mlbID = (mlbID & 0x03FF) | ((uint16_t)((slaveAdd)<<10)); 
    mlbID = set_mlbID_parity(mlbID);
    
    *array = (char)((mlbID & 0xFF00)>>8);
    *(array+1) = (char)(mlbID & 0x00FF);    
}